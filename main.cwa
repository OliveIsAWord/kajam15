include "microw8-api.cwa"

global mut x = 160.0;
global mut y = 120.0;
global mut prevTime = 0.0;
const SPEED = 180.0;
const DASH_DISTANCE = 80.0;
const PLAYER_SIZE = 8.0;
const MOVE_ITERS = 10;

const TIMING_FUDGE = 0.1;

// GHOST_DATA: [0x4000; (i16, i16)]
// ghostHead indexes where the next ghost should be written
// ghostTail indexes the oldest ghost
// GHOST_DATA[ghostTail..ghostHead] is all ghosts from oldest to youngest
//   - this slice will always be contiguous;  all data is copied to
//     the beginning of GHOST_DATA when ghostHead would exceed 0x4000
//   - the length of this slice will be smaller than ghostLen if
//     the game has recently started or ghostLen was recently increased.
// ghostHead - ghostTail <= ghostLen
const GHOST_FPS = 70.0;
const GHOST_DATA = 0x30000;
const GHOST_CAP = (0x40000 - GHOST_DATA) / 4;
global mut prevTimeGhost = 0.0;
global mut ghostLen = 210;
global mut ghostHead = 0;
global mut ghostTail = 0;

// Static bodies are stored as a null terminated array of
// { x: u8, y: u8, r: u8, _: u8 }.
const STATIC_DATA = 0x28000;

// Each monster is a
// f32 x
// f32 y
// u8  kind
// u8  state
// i16 data1
// i32 data2
const ENEMY_DATA = 0x20000;
const ENEMY_STRIDE = 0x10;
global mut enemyLen = 0;
// Kind 0: null
// Kind 1: Eighter
const EIGHTER_T_SPEED = 4.0;
const EIGHTER_SPEED = 80.0;
const EIGHTER_SWOOP = 25.0;

data 0x14000 {
    f32(14.0)
}

// SOUND_DATA
// i32 start time in millis (nullable)
// f32 BPM

global mut firstFrame = 1;
fn onFirstFrame() {
    prevTime = time();
    0!SOUND_DATA = 0!TIME_MS + 1;
    4$SOUND_DATA = 94.0;
    
    0!STATIC_DATA = 0x507820;
    4!STATIC_DATA = 0xf07820;
    8!STATIC_DATA = 0;

    0$ENEMY_DATA = 160.0;
    4$ENEMY_DATA = -30.0;
    8!ENEMY_DATA = 0x01;
    12$ENEMY_DATA = 0.0;
    enemyLen = 1;
}

fn dashEnemy(x1: f32, y1: f32, x2: f32, y2: f32, i: i32) -> i32 {
    // https://mathworld.wolfram.com/Circle-LineIntersection.html
    let ptr = i * ENEMY_STRIDE + ENEMY_DATA;
    x1 -= ptr$0;
    x2 -= ptr$0;
    y1 -= ptr$4;
    y2 -= ptr$4;
    let dr = sqrt(pow(x2 - x1, 2.0) + pow(y2 - y1, 2.0));
    let det = x1 * y2 - x2 * y1;
    let r = (ptr?8 * 4)$0x13ffc + PLAYER_SIZE + 2.0;
    let discriminant = r * r * dr * dr - det * det;
    discriminant >= 0.0
}

fn clearGhosts() {
    ghostTail = ghostHead;
}

fn removeEnemy(iiiii: i32) {
    let aa = iiiii * ENEMY_STRIDE + ENEMY_DATA;
    let bb = (ghostLen - 1) * ENEMY_STRIDE + ENEMY_DATA;
    if ENEMY_STRIDE != 16 { 0/0; }
    aa!0 = bb!0;
    aa!4 = bb!4;
    aa!8 = bb!8;
    aa!12 = bb!12;
    enemyLen -= 1;
}

fn pushGhost() {
    if ghostHead >= GHOST_CAP {
        let i: i32;
        loop GhostCopy {
            if i + ghostTail < ghostHead {
                (i*4)!GHOST_DATA = ((i+ghostTail)*4)!GHOST_DATA;
                i += 1;
                branch GhostCopy;
            }
        }
        ghostHead = i;
        ghostTail = 0;
    }
    (ghostHead*4)!GHOST_DATA = ((x as i32 << 16) | y as i32) ^ (1 << 30);
    ghostHead += 1;
    if ghostHead - ghostTail > ghostLen {
        ghostTail = ghostHead - ghostLen;
    }
}

export fn snd(_: i32) -> f32 { 0 as f32 }

// If circles C1 and C2 collide, returns 1 and assigns a new C1 in x and y
// so that it touches C2 exactly. Else, returns 0 and dx and dy are unspecified.
global mut circleCollide_x = 0.0;
global mut circleCollide_y = 0.0;
fn circleCollide(x1: f32, y1: f32, r1: f32, x2: f32, y2: f32, r2: f32) -> i32 {
    let gpX = x1 - x2;
    let gpY = y1 - y2;
    let mag = max(sqrt(gpX * gpX + gpY * gpY), 0.0001);
    let r = r1 + r2;
    circleCollide_x = x2 + r / mag * gpX;
    circleCollide_y = y2 + r / mag * gpY;
    mag < r
}

export fn upd() {
    if firstFrame {
        firstFrame = 0;
        onFirstFrame();
    }
    cls(0);
    let beat = {
        let t1 = (0!TIME_MS - 0!SOUND_DATA) as f32 / (60.0 * 1000.0) * 4$SOUND_DATA;
        fmod(t1, 1.0)
    };
    let gridColor = {
        let t2 = ((1.0 - beat) * 16.0) as i32;
        t2 / 4 * 16 + t2 / 2 + 18
    };
    let gridLen = 25;
    let gridV = -gridLen / 2;
    loop GridLines {
        hline(0, 320, gridV, gridColor);
        line(gridV as f32, 0.0, gridV as f32, 240.0, gridColor);
        branch_if (gridV +:= gridLen) < 320: GridLines;
    }
    let dt = time() - prevTime;
    prevTime = time();
    let mx = if isButtonPressed(BUTTON_LEFT) {
        -1.0
    } else if isButtonPressed(BUTTON_RIGHT) {
        1.0
    } else {
        0.0
    };
    let my = if isButtonPressed(BUTTON_UP) {
        -1.0
    } else if isButtonPressed(BUTTON_DOWN) {
        1.0
    } else {
        0.0
    };
    let mag = sqrt(mx*mx + my*my);
    if mag != 0.0 {
        mx /= mag;
        my /= mag;
    }
    let nx = x;
    let ny = y;
    let isDash = isButtonTriggered(BUTTON_B);
    if isDash {
        nx += mx * DASH_DISTANCE;
        ny += my * DASH_DISTANCE;
        nx = clamp(nx, PLAYER_SIZE, 320.0 - PLAYER_SIZE);
        ny = clamp(ny, PLAYER_SIZE, 240.0 - PLAYER_SIZE);
        if (beat - TIMING_FUDGE <= 0.0) | (beat + TIMING_FUDGE >= 1.0) {
            let enemyI: i32;
            loop DashEnemy {
                if enemyI < enemyLen {
                    if dashEnemy(x, y, nx, ny, enemyI) {
                        removeEnemy(enemyI);
                    } else {
                        enemyI += 1;
                    }
                    branch DashEnemy;
                }
            }
        }
    } else {
        let iters: i32;
        loop GhostCollideIter {
        let oldX = nx;
        let oldY = ny;
        nx += mx * SPEED * dt / MOVE_ITERS as f32;
        ny += my * SPEED * dt / MOVE_ITERS as f32;
        nx = clamp(nx, PLAYER_SIZE, 320.0 - PLAYER_SIZE);
        ny = clamp(ny, PLAYER_SIZE, 240.0 - PLAYER_SIZE);
        let i = ghostTail;
        loop GhostCollide {
            if i < ghostHead {
                let data = (i*4)!GHOST_DATA;
                if !((data >> 31) ^ (data >> 30) & 1) {
                    let ix = (data >> 16) as f32;
                    let iy = sext16(data & 0xffff) as f32;
                    if circleCollide(nx, ny, PLAYER_SIZE, ix, iy, PLAYER_SIZE) {
                        nx = circleCollide_x;
                        ny = circleCollide_y;
                    }
                }
                i += 1;
                branch GhostCollide;
            }
        }
        i = 0;
        loop StaticCollide {
            let staticX = (i*4 + 2)?STATIC_DATA;
            let staticY = (i*4 + 1)?STATIC_DATA;
            let staticR = (i*4)?STATIC_DATA;
            if staticX | staticY | staticR {
                if circleCollide(nx, ny, PLAYER_SIZE, staticX as f32, staticY as f32, staticR as f32) {
                    nx = circleCollide_x;
                    ny = circleCollide_y;
                }
                i += 1;
                branch StaticCollide;
            }
        }
        branch_if (iters := iters + 1) < MOVE_ITERS: GhostCollideIter;
        }
    }
    x = nx;
    y = ny;
    
    let i: i32 = 0;
    loop StaticDraw {
        let staticX = (i*4 + 2)?STATIC_DATA;
        let staticY = (i*4 + 1)?STATIC_DATA;
        let staticR = (i*4)?STATIC_DATA;
        if staticX | staticY | staticR {
            circle(staticX as f32, staticY as f32, staticR as f32, 0x14);
            i += 1;
            branch StaticDraw;
        }
    }
    
    i = ghostTail;
    let data: i32;
    loop GhostDraw {
        if i < ghostHead {
            data = (i*4)!GHOST_DATA;
            let isActive = !(((data >> 31) ^ (data >> 30)) & 1);
            data ^= !isActive << 30;
            let ix = (data >> 16) as f32;
            let iy = sext16(data & 0xffff) as f32;
            let dist = sqrt(pow(x - ix, 2.0) + pow(y - iy, 2.0));
            if !isActive & dist >= 2.0*PLAYER_SIZE {
                isActive = 1;
                (i*4)!GHOST_DATA = data;
            }
            let color = {
                let meow = (ghostHead - i) as f32 / (ghostHead - ghostTail) as f32 * -3.0;
                meow as i32 + (fmod(meow, 1.0) > randomf()) + 4
            };
            circle(ix, iy, PLAYER_SIZE, color);
            i += 1;
            branch GhostDraw;
        }
    }
    circle(floor(x), floor(y), PLAYER_SIZE, 0x0f);
    
    i = 0;
    loop EnemyDraw { if i < enemyLen {
        let enemyPtr = i * ENEMY_STRIDE + ENEMY_DATA;
        let enemyX = enemyPtr$0;
        let enemyY = enemyPtr$4;
        let enemyKind = enemyPtr?8;
        let enemySize = (enemyKind * 4)$0x13ffc;
        let enemyColor: i32;
        if isButtonTriggered(BUTTON_Y) | 1 {
        if enemyKind == 1 {
            // Eighter
            let t = enemyPtr$12;
            enemyPtr$12 = t + EIGHTER_T_SPEED * dt;
            // x'(t) = a cos(t)
            // y'(t) = a (cos^2(t) - sin^2(t))
            enemyX += EIGHTER_SWOOP * EIGHTER_T_SPEED * dt * (cos(t));
            enemyY += EIGHTER_SWOOP * EIGHTER_T_SPEED * dt * (cos(t) * cos(t) - sin(t) * sin(t));
            let targetX = x;
            let targetY = y;
            let enemyDirX = targetX - enemyX;
            let enemyDirY = targetY - enemyY;
            let enemyDirMag = EIGHTER_SPEED * dt / max(sqrt(enemyDirX * enemyDirX + enemyDirY * enemyDirY), 0.0001);
            enemyX += enemyDirX * enemyDirMag;
            enemyY += enemyDirY * enemyDirMag;
            enemyColor = 0x59;
        } else {
            cls(0x44);
            printInt(enemyKind);
        }
        enemyPtr$0 = enemyX;
        enemyPtr$4 = enemyY;
        circle(floor(enemyX), floor(enemyY), enemySize, enemyColor);
        i += 1;
        branch EnemyDraw;}
    }}
    
    i = (GHOST_FPS * (time() - prevTimeGhost)) as i32;
    loop ghostsToAdd {
        if i {
            prevTimeGhost = time();
            pushGhost();
            i -= 1;
            branch ghostsToAdd;
        }
    }
}

fn sext16(v: i32) -> i32 {
    v + (v #>> 15) * 0xffff0000
}

fn clamp(v: f32, min: f32, max: f32) -> f32 {
    if v < min { min } else if v > max { max } else { v }
}

