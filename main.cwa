// 389 bytes -> 297 bytes

include "microw8-api.cwa"

global mut dn_1 = 0.0;
global mut sum_sq = 0.0;

export fn snd(frame: i32) -> f32 {
    let inline bps = 6.25;
    let inline iLen = 16;
    let inline len = 16.0;
    let x: f32;
    let voice: i32;
    let inline lr = frame #% 2;
    let inline t = (frame #/ 2) as f32 / 44100.0;
    let inline measure = fmod(t * bps, len);
    let lazy beat = measure as i32;
    let lazy a = fmod(measure, 1.0);
    randomSeed(frame #/ 2);
    loop voices {
        let lazy playing = ((((voice * iLen + beat) #/ 8)!0 >> (beat % 8)) & 1) as f32;
        x += playing * if voice == 0 {
            let lazy kick = playing * sin(a / bps * 6.0 * (800.0 * pow(1.0 - a, 10.0))) * (6.0 / 16.0);
            sum_sq = sum_sq * (2047.0 / 2048.0) + 0.01 * kick * kick;
            kick
        } else if voice == 1 {
            let inline drum = sin(a / bps * 600.0 * (2.25 + pow(1.0 - a, 8.0))) * pow(1.0 - a, 8.0) * (6.0 / 16.0);
            let lazy rawWires = (randomf() - 0.5) * pow(1.0 - a, 3.0) * (3.0 / 16.0);
            {
                //let inline cutoffFrequency = 5000.0;
                //let inline v = tan(3.0 * cutoffFrequency / 44100.0);
                //let inline v = 0.25;
                //let inline a1 = (v - 1.0) / (v + 1.0);
                //let inline a1 = -0.5;
                let inline allPass = (rawWires - dn_1) * 0.5;
                rawWires + allPass <| if lr {dn_1 = rawWires + allPass * 0.5;}
            } + drum
        } else if voice == 2 {
            (randomf() - 0.5) * pow(1.0 - a, 10.0) * (3.0 / 16.0)
        } else {
            (randomf() - 0.5) * pow(1.0 - a, 1.0) * (3.0 / 16.0)
        };
        branch_if (voice := voice + 1) < 8: voices;
    }
    voice = 0;
    loop basses {
        x += fmod(t * 70.0 * (1.0 + voice as f32 / 200.0), 1.0) * ((3.0 / 16.0) / (1.0 + 1.5 * voice as f32)) * (1.0 - 0.875 * pow(sum_sq, 0.5)) * pow(1.0 - a, 0.5);
        branch_if (voice := voice + 1) < 8: basses;
    }
    x
}

data 0 {i8(
    0x81, 0x40,
    0x10, 0x90,
    0xd6, 0xbb,
    0x29, 0x44
)}