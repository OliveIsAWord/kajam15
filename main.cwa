// 389 bytes

include "microw8-api.cwa"

global mut dn_1 = 0.0;
global mut wires = 0.0;
global mut sum_sq = 0.0;

const SPEED = 5;

export fn snd(frame: i32) -> f32 {
    let bps = 94.0 / 60.0 * 4.0;
    let iLen = 16;
    let len = iLen as f32;
    let x: f32;
    let voice: i32;
    let lr = frame #% 2;
    let t = (frame #/ 2) as f32 / 44100.0;
    let measure = fmod(t * bps, len);
    let beat = measure as i32;
    let a = fmod(measure, 1.0);
    randomSeed(i32.reinterpret_f32(t));
    loop voices {
        let playing = !!(((voice * iLen + beat) / 8)!0 & 1 << (beat % 8)) as f32;
        x += playing * if voice == 0 {
            let kick = playing * sin(a / bps * 6.28 * (800.0 * pow(1.0 - a, 10.0))) * 0.4;
            sum_sq = sum_sq * 0.9997 + 0.01 * kick * kick;
            kick
        } else if voice == 1 {
            let drum = sin(a / bps * 6.28 * (230.0 + 100.0 * pow(1.0 - a, 8.0))) * pow(1.0 - a, 6.0) * 0.4;
            let rawWires = (randomf() - 0.5) * pow(1.0 - a, 3.0) * 0.5;
            if lr {
                let cutoffFrequency = 5000.0;
                let v = tan(3.14 * cutoffFrequency / 44100.0);
                let a1 = (v - 1.0) / (v + 1.0);
                let allPass = a1 * rawWires + dn_1;
                dn_1 = rawWires - a1 * allPass;
                wires = (rawWires - allPass) * 0.5;
            }
            drum + wires
        } else if voice == 2 {
            (randomf() - 0.5) * pow(1.0 - a, 10.0) * 0.2
        } else {
            (randomf() - 0.5) * pow(1.0 - a, 1.0) * 0.2
        };
        branch_if (voice := voice + 1) < 4: voices;
    }
    voice = 0;
    loop basses {
        x += fmod(t * 70.0 * (1.0 + voice as f32 / 200.0), 1.0) * (0.3 / (1.0 + 1.5 * voice as f32)) * (1.0 - 0.9 * pow(sum_sq, 0.5)) * pow(1.0 - a, 0.5);
        branch_if (voice := voice + 1) < 10: basses;
    }
    x * 0.5
}

data 0 {i8(
    0x81, 0x40,
    0x10, 0x90,
    0xd6, 0xbb,
    0x29, 0x44
)}